
import Control.Applicative

-- | One step in a path, indicating whether to follow the left subtree (L)
--   or the right subtree (R).
data Step = L | R
  deriving (Eq,Show)


-- | A path is just a sequence of steps. Each node in a binary tree can be
--   identified by a different path, indicating how to walk down the tree
--   starting from the root. See the examples for `valueAt`.
type Path = [Step]


-- | Binary trees with nodes labeled by an arbitrary type.
data Tree a = Node a (Tree a) (Tree a)
            | End
  deriving (Eq,Show)


-- | Create a leaf node.
leaf :: a -> Tree a
leaf x = Node x End End


-- | An example tree.
ex :: Tree Int
ex = Node 4 (Node 3 (leaf 2) End)
            (Node 7 (Node 5 End (leaf 6))
                    (leaf 8))


-- | Get the value at the node specified by a path.
--
--   >>> valueAt [] ex
--   Just 4
--
--   >>> valueAt [L,L] ex
--   Just 2
--
--   >>> valueAt [L,R] ex
--   Nothing
--
--   >>> valueAt [R,L,R] ex
--   Just 6
--
--   >>> valueAt [L,L,L] ex
--   Nothing
--
--data Maybe a = Nothing | Just a
--	deriving(Eq,Show)

valueAt :: Path -> Tree a -> Maybe a
valueAt [] (Node x _ _)     = Just x
valueAt [] ( End )     = Nothing
valueAt [xs] (Node x End End)   =Nothing
valueAt [xs] End                = Nothing
--valueAt [] (Node x _ _)     = Just x
valueAt (L:xs) (Node x k y )= valueAt(xs) k --(Node k _ _)
valueAt(R:xs) (Node x y k)= valueAt(xs) k --(Node k _ _)


-- | Find a path to a node that contains the given value.
--
--   >>> pathTo 3 (leaf 5)
--   Nothing
--
--   >>> pathTo 5 ex
--   Just [R,L]
--
--   >>> pathTo 6 ex
--   Just [R,L,R]
--
--   >>> pathTo 4 ex
--   Just []
--
--   >>> pathTo 10 ex
--   Nothing
--
pathTo :: Eq a => a -> Tree a -> Maybe Path
pathTo n End = Nothing
pathTo n (Node x l r)= if(n == x) then Just []
                       else (fmap (L:) (pathTo n l))<|> (fmap (R:) (pathTo n r))

--pathTo x (leaf y)= if(x==y) then L else Nothing
--pathTo x (Node n x y)= if(inBST) then add it or else dont

--pathTo x (leaf y)= if(x==y) then L else Nothing


-- | Apply a function to the value at every node in the tree.
--   
--   >>> mapTree odd End
--   End
--
--   >>> mapTree even (Node 5 (leaf 2) (leaf 3))
--   Node False (Node True End End) (Node False End End)
--
--   >>> (mapTree not . mapTree even) (Node 5 (leaf 2) (leaf 3))
--   Node True (Node False End End) (Node True End End)
--
--   >>> mapTree (+10) ex
--   Node 14 (Node 13 (Node 12 End End) End) (Node 17 (Node 15 End (Node 16 End End)) (Node 18 End End))
--
--   >>> ex == (mapTree (subtract 27) . mapTree (+27)) ex
--   True
--
--mapTree = undefined
compress :: b -> (a -> b -> b -> b) -> Tree a -> b
compress x _ End     = x
compress x y (Node n n1 n2) = y n (compress x y n1) (compress x y n2)

mapTree :: (a -> b) -> Tree a -> Tree b
mapTree f = compress End (\x t1 t2 -> Node (f x) t1 t2) 

--mapTree a (Node x (leaf y) (leaf z ))= Node a(x) ( Node a(y) End End  ) ( Node a(z) End End  ) 
--mapTree a (Node n x y )				= map Node()
